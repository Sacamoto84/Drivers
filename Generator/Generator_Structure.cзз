
#include "stm32f4xx_hal.h"

#include "tim.h"
#include "dma.h"
#include "generator.h"
#include "fatfs.h"
#include <stdlib.h>
#include <string.h>

_structure_carrier  list_carrier;
_structure_carrier  list_mod;

_structure_ch sCH1, sCH2; //Р�СЃРїРѕР»СЊР·СѓСЋС‚СЃСЏ РґР»СЏ С‡С‚РµРЅРёСЏ РЅР°СЃС‚СЂРѕРµРє РёР· С„Р°Р№Р»Р° save.dat Рё СЃРѕРґРµСЂР¶Р°С‚ РѕР±СЂР°Р· С‚РµРєСѓС‰РёС… РЅР°СЃС‚СЂРѕРµРє

void Generator_read_save_file_to_structure_ch(void) //Р§С‚РµРЅРёРµ С„Р°Р№Р»Р° СЃРѕС…СЂР°РЅРµРЅРёСЏ Рё Р·Р°РїРёСЃСЊ РµРіРѕ РІ СЃС‚СЂСѓРєС‚СѓСЂСѓ
{
  char sdstr[16];
	
	if (f_open(&SDFile, "/config/save.dat", FA_OPEN_EXISTING | FA_READ) == FR_OK)
	  {
			sprintf(str1,"f_open  Save.dat == OK\n\r");
      SEGGER_SYSVIEW_Warn(str1);
			
      f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH1.Carrier_fr = atoi(sdstr);
			
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH1.Carrier_mod = atoi(sdstr);
			
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH1.AM_fr = atof(sdstr);
			
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH1.AM_mod = atoi(sdstr);
			
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH1.FM_Base = atoi(sdstr);
			
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH1.FM_Dev = atoi(sdstr);
			
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH1.FM_mod = atoi(sdstr);
			
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH1.FM_mod_fr = atof(sdstr);
			
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH1.AM_EN = atoi(sdstr);
			
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH1.FM_EN = atoi(sdstr);
			/////////////////////////////////////////////////////////
	    f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH2.Carrier_fr = atoi(sdstr);
			
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH2.Carrier_mod = atoi(sdstr);
			
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH2.AM_fr = atof(sdstr);
			
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH2.AM_mod = atoi(sdstr);
			
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH2.FM_Base = atoi(sdstr);
			
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH2.FM_Dev = atoi(sdstr);
			
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH2.FM_mod = atoi(sdstr);
					
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH2.FM_mod_fr = atof(sdstr);		
					
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH2.AM_EN = atoi(sdstr);
			
			f_gets((char*)sdstr, sizeof(sdstr), &SDFile);
      sCH2.FM_EN = atoi(sdstr);		
			/////////////////////////////////////////////////////////	
		  f_close(&SDFile);
			
			sCH1.CH = 0;
			sCH2.CH = 1;
			
		}
		else
		{
			sprintf(str1,"f_open == ERROR\n\r");
      SEGGER_SYSVIEW_Warn(str1);
		}
}	

void Generator_save_structure_ch_to_file(void) //РЎРѕС…СЂРЅРёС‚СЊ СЃС‚СЂСѓРєС‚СѓСЂСѓ РІ save.dat
{
  //char sdstr[16];
	uint32_t testByte;
	
	if (f_open(&SDFile, "/config/save.dat", FA_CREATE_ALWAYS | FA_WRITE | FA_READ) == FR_OK)
	  {
			sprintf(str1,"f_open  Save.dat == OK\n\r");
      SEGGER_SYSVIEW_Warn(str1);
			
			sprintf(str1,"%.0f\n", sCH1.Carrier_fr);
			f_write(&SDFile, &str1, strlen(str1), &testByte);		
   		sprintf(str1,"%d\n", sCH1.Carrier_mod);
      f_write(&SDFile, &str1, strlen(str1), &testByte);
			sprintf(str1,"%.1f\n", sCH1.AM_fr);
      f_write(&SDFile, &str1, strlen(str1), &testByte);
			sprintf(str1,"%d\n", sCH1.AM_mod);
      f_write(&SDFile, &str1, strlen(str1), &testByte);
			sprintf(str1,"%d\n", sCH1.FM_Base);
      f_write(&SDFile, &str1, strlen(str1), &testByte);
			sprintf(str1,"%d\n", sCH1.FM_Dev);
      f_write(&SDFile, &str1, strlen(str1), &testByte);
			sprintf(str1,"%d\n", sCH1.FM_mod);
      f_write(&SDFile, &str1, strlen(str1), &testByte);
			sprintf(str1,"%.1f\n", sCH1.FM_mod_fr);
      f_write(&SDFile, &str1, strlen(str1), &testByte);
			sprintf(str1,"%d\n", sCH1.AM_EN);
      f_write(&SDFile, &str1, strlen(str1), &testByte);
    	sprintf(str1,"%d\n", sCH1.FM_EN);
      f_write(&SDFile, &str1, strlen(str1), &testByte);
			/////////////////////////////////////////////////////////
			sprintf(str1,"%.0f\n", sCH2.Carrier_fr);
      f_write(&SDFile, &str1, strlen(str1), &testByte);
			sprintf(str1,"%d\n", sCH2.Carrier_mod);
      f_write(&SDFile, &str1, strlen(str1), &testByte);	
			sprintf(str1,"%.1f\n", sCH2.AM_fr);
      f_write(&SDFile, &str1, strlen(str1), &testByte);	
			sprintf(str1,"%d\n", sCH2.AM_mod);
      f_write(&SDFile, &str1, strlen(str1), &testByte);
			sprintf(str1,"%d\n", sCH2.FM_Base);
      f_write(&SDFile, &str1, strlen(str1), &testByte);		
			sprintf(str1,"%d\n", sCH2.FM_Dev);	
      f_write(&SDFile, &str1, strlen(str1), &testByte);			
			sprintf(str1,"%d\n", sCH2.FM_mod);			
			f_write(&SDFile, &str1, strlen(str1), &testByte);
			sprintf(str1,"%.1f\n", sCH2.FM_mod_fr);			
			f_write(&SDFile, &str1, strlen(str1), &testByte);
			sprintf(str1,"%d\n", sCH2.AM_EN);
			f_write(&SDFile, &str1, strlen(str1), &testByte);
			sprintf(str1,"%d\n", sCH2.FM_EN);
      f_write(&SDFile, &str1, strlen(str1), &testByte);
			/////////////////////////////////////////////////////////	
			f_close(&SDFile);	
			
      //uTFT_Fill(BLUE); // 224 us
			//uTFT.FColor = WHITE;
      //u8g_DrawStr(70, 120, "Save Ok");	
			//uTFT_Update();
			//HAL_Delay(500);
		}
		else
		{
			//sprintf(str1,"f_open == ERROR\n\r");
      //SEGGER_SYSVIEW_Warn(str1);
			//uTFT_Fill(BLUE); // 224 us
			//uTFT.FColor = WHITE;
			//u8g_DrawStr(70, 125, "Save ERROR");
			//uTFT_Update();
			//HAL_Delay(500);
		}
}

//convertHzToR(float hz)
	
//Р—Р°РїРѕР»РЅРµРЅРёРµ СЃС‚СЂСѓРєС‚РєСЂС‹, СЂРµР°Р»СЊРЅС‹РјРё РЅР°СЃС‚СЂРѕР№РєР°РјРё
void Generator_RAW_to_Structure(_structure_ch * _CH)
{
	if (_CH->CH == 0)
	{
		//РљР°РЅР°Р» 0
		 _CH->Carrier_fr     = convertRToHz(rC_1); 
		 _CH->AM_fr          = convertRToHz(rAM_1); 
		 _CH->FM_mod_fr      = convertRToHz(rFM_1); 
     _CH->AM_EN          = CH1_AM_EN;
		 _CH->FM_EN          = CH1_FM_EN;
	}
	else
	{
		 _CH->Carrier_fr     = convertRToHz(rC_2); 
		 _CH->AM_fr          = convertRToHz(rAM_2); 
		 _CH->FM_mod_fr      = convertRToHz(rFM_2); 	
     _CH->AM_EN          = CH2_AM_EN;
		 _CH->FM_EN          = CH2_FM_EN;		
	}
}

//Р—Р°РїРѕР»РЅРµРЅРёРµ СЂРµР»СЊРЅС‹Рµ РґР°РЅРЅС‹Рµ РґР°РЅРЅС‹РјРё РёР· СЃС‚СЂСѓРєС‚СѓСЂС‹
void Generator_Structure_to_RAW(_structure_ch * _CH)
{
	if (_CH->CH == 0)
	{
		//РљР°РЅР°Р» 0
		  rC_1  = convertHzToR ( _CH->Carrier_fr ); 
		  rAM_1 = convertHzToR ( _CH->AM_fr );
   		rFM_1 = convertHzToR ( _CH->FM_mod_fr );
      CH1_AM_EN = _CH->AM_EN;
      CH1_FM_EN = _CH->FM_EN;
	}
	else
	{
		  rC_2  = convertHzToR ( _CH->Carrier_fr ); 
		  rAM_2 = convertHzToR ( _CH->AM_fr );
   		rFM_2 = convertHzToR ( _CH->FM_mod_fr ); 
      CH2_AM_EN = _CH->AM_EN;
      CH2_FM_EN = _CH->FM_EN;		
	}
}

